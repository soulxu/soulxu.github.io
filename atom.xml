<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Alex Xu]]></title>
  <link href="http://soulxu.github.io/atom.xml" rel="self"/>
  <link href="http://soulxu.github.io/"/>
  <updated>2017-10-29T21:51:08+08:00</updated>
  <id>http://soulxu.github.io/</id>
  <author>
    <name><![CDATA[Alex Xu (soulxu@gmail.com)]]></name>
    <email><![CDATA[soulxu@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Some ideas for Nova API in Kilo]]></title>
    <link href="http://soulxu.github.io/blog/2014/09/12/one-option-for-nova-api/"/>
    <updated>2014-09-12T12:37:17+08:00</updated>
    <id>http://soulxu.github.io/blog/2014/09/12/one-option-for-nova-api</id>
    <content type="html"><![CDATA[<p>Close to Kilo, it is time to think about what next for nova API. Let me
write down some ideas from me at here, although I&rsquo;m not sure those idea can be
accepted finally, but really hope those can give some help.</p>

<p>Those ideas are for micro-version and policy.</p>

<h1>Micro-version</h1>

<p>When we propose v2 on v3, the propose already include a series method for
supporting multiple version in API. Those methods can be used in
micro-version. But in finally those methods was considered too complex or too heavy.
(The previous propose <a href="https://review.openstack.org/#/c/84695/19/specs/juno/v2-on-v3-api.rst">https://review.openstack.org/#/c/84695/19/specs/juno/v2-on-v3-api.rst</a>)</p>

<p>Think of use-cases for API change:</p>

<ul>
<li>Input changing</li>
<li>Output changing</li>
<li>Semantic changing</li>
<li>Status code changing</li>
<li>Resource name changing</li>
</ul>


<p>For the change of status code, and resource name are really simple to implement.</p>

<p>For semantic changes, there isn&rsquo;t choice we must provide two version python code
in api layer. We propose method for distinguish different semantic in v2 on v3,
but it have too much magic, so think about to simplify it.</p>

<p>The most of complex part is input and output change. And in v2 on v3 propose,
this part also implement as most complex. We provide method to translate the input
and json-schema, but that make the json-schema hard to maintenance and read.</p>

<p>The new ideas is want to provide simple implementation for input/output change, and
reduce the magic we used.</p>

<p>Actually there are already done some POC for those ideas:</p>

<ul>
<li>The PoC with mapping input/output into flat dict:
    <a href="https://github.com/soulxu/nova-v3-api-doc/commits/new_idea4">https://github.com/soulxu/nova-v3-api-doc/commits/new_idea4</a></li>
<li>The PoC with mapping input/output into nova object:
    <a href="https://github.com/soulxu/nova-v3-api-doc/tree/new_idea_with_obj2">https://github.com/soulxu/nova-v3-api-doc/tree/new_idea_with_obj2</a></li>
</ul>


<p>The frist 3 commits are implement wsgi infrastruct as new ideas.
The last 4 commits are demo the use-case in micro-version.</p>

<h2>Let&rsquo;s take a look at some example</h2>

<p>There is fake code for an extension that add new action to server. This fake code
also includes some usual inconsistent and mistake in v2 API that we want to fix in
the future. Anyway most of API code structure looks like as below:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SomeActionController</span><span class="p">(</span><span class="n">wsgi</span><span class="o">.</span><span class="n">Controller</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span> <span class="o">=</span> <span class="n">compute</span><span class="o">.</span><span class="n">API</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="o">.</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&quot;nova.context&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">action_body</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">&quot;someAction&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">param_a</span> <span class="o">=</span> <span class="n">action_body</span><span class="p">[</span><span class="s">&quot;paramA&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="n">common</span><span class="o">.</span><span class="n">get_instance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">want_objects</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">authorize</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">instance</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;some_action&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span><span class="o">.</span><span class="n">some_action</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">param_a</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span><span class="s">&quot;ActionResult&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;resultA&quot;</span><span class="p">:</span> <span class="n">res</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>Also need related json-schema</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">some_action</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;someAction&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;paramA&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;string&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;paramA&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;someAction&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<h2>Change the API with the method in v2 on v3 propose</h2>

<p>For fix the status code, we just need change the decorator to indict
the specified version status code.</p>

<p>For fix the inconsistent in the input, we need write a translation-schema
file (looks like json-schema).</p>

<p>And for fix the inconsistent in the output, we need change the python code directly.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;request_body&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;some_action&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;rename_to&#39;</span><span class="p">:</span> <span class="s">&#39;someAction&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="s">&#39;param_a&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;rename_to&#39;</span><span class="p">:</span> <span class="s">&#39;paramA&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;response_body&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;action_result&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;rename_to&#39;</span><span class="p">:</span> <span class="s">&#39;actionResult&#39;</span><span class="p">}</span>
</span><span class='line'>        <span class="s">&#39;result_a&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;rename_to&#39;</span><span class="p">:</span> <span class="s">&#39;resultA&#39;</span><span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>Also need add decorator for api python method.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;2.1&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">202</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&quot;3.0&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@wsgi.v2_translate_body</span><span class="p">(</span><span class="n">gap</span><span class="o">.</span><span class="n">base</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="o">.</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&quot;nova.context&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">action_body</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">&quot;someAction&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">param_a</span> <span class="o">=</span> <span class="n">action_body</span><span class="p">[</span><span class="s">&quot;paramA&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span><span class="s">&quot;action_result&quot;</span><span class="p">:</span> <span class="p">{</span><span class="s">&quot;result_a&quot;</span><span class="p">:</span> <span class="n">res</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>Before wsgi invoke API python code, the decorator &lsquo;v2_translate_body&rsquo; should translate
input and json-schema as the old one that make API python code can understand the
request. That means API python code always assume the user request is oldest format.</p>

<p>There are two downsides with this method:</p>

<ul>
<li><p>The implementation is complex</p>

<p>Actually not only need translate the request body, also need translate the json-schema
that used to validate the input with new format, and also for the output.</p>

<p>And not only support &lsquo;rename_to&rsquo; instruct, also need support &lsquo;move_to&rsquo; instruct for
the case like scheduler_hints.</p>

<p>(The scheduler_hint param is out of the server struct in the request, that is wrong.
 <a href="https://github.com/openstack/nova/blob/master/doc/api_samples/OS-SCH-HNT/scheduler-hints-post-req.json">https://github.com/openstack/nova/blob/master/doc/api_samples/OS-SCH-HNT/scheduler-hints-post-req.json</a>)</p></li>
<li><p>The multiple version json-schema is unreadable and hard to maintenance by dev</p>

<p>When there already doing multiple version changes for the request format, the translation-schema is
dependence on one by one. Except there is json-schema file for the oldest format, other version
json-schema only can  get by translation. The dev is no way to get specified version json-schema,
except they runing the code and print it out.</p></li>
</ul>


<p>And except the method input/output change, we also provide some magic for distinguish different semantic.
(<a href="https://review.openstack.org/82301">https://review.openstack.org/82301</a>). But it also make the code hard to read.</p>

<h2>The new method for support multiple version</h2>

<p>Thinking of the key reason of make those complex thing is the python code also need
input/output format knowledge. Actually, the json-schema already includes those
information.</p>

<p>The idea of new method for input/output change is just eliminate the format knowledge
from python code. Whatever the format it is, python code just need got a flat dict
without any format.</p>

<p>(And other idea is got a nova objects, and I didn&rsquo;t think out of enough benefit from
using nova object, but this idea is worth to think about. Honestly I&rsquo;m not familiar
with objects, maybe the POC with nova object is bad)</p>

<p>Then after the input/output format is changed, we just need update the json-schema,
we needn&rsquo;t any modify for API python code.</p>

<p>Note that with this method, we need json-schema for response also, there already
have plan to move response json-schema into nova. So that won&rsquo;t be an extra work.</p>

<p>After make the python code only accept a flat dict instead of whole request body,
the code need some simple change as below:</p>

<p>(PoC with evacuate api as example: <a href="https://github.com/soulxu/nova-v3-api-doc/commit/2d8489650ba221a3019b7db548ef8ce7a8a186dd">https://github.com/soulxu/nova-v3-api-doc/commit/2d8489650ba221a3019b7db548ef8ce7a8a186dd</a>)</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@wsgi.version</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&quot;nova.context&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">param_a</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">&quot;param_a&quot;</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">instance</span> <span class="o">=</span> <span class="n">common</span><span class="o">.</span><span class="n">get_instance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span><span class="p">,</span> <span class="n">context</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span>
</span><span class='line'>                                       <span class="n">want_objects</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class='line'>        <span class="n">authorize</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">instance</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;some_action&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span><span class="o">.</span><span class="n">some_action</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">param_a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span><span class="s">&quot;result_a&quot;</span><span class="p">:</span> <span class="n">res</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>And change for json-schema:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">some_action_input_2_1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;someAction&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;paramA&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;string&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;paramA&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;someAction&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;ext:mapping&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;paramA&#39;</span><span class="p">:</span> <span class="s">&#39;param_a&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_action_output_2_1</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;actionResult&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;resultA&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;string&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;resultA&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;actionResult&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;ext:mapping&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;resultA&#39;</span><span class="p">:</span> <span class="s">&#39;result_a&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<h2>Change API with new idea</h2>

<p>Let&rsquo;s try some use-case to demo this idea. Frist fixed the inconsistent and status code.</p>

<p>(PoC with evacuate api as example: <a href="https://github.com/soulxu/nova-v3-api-doc/commit/295a28fdf435f23bfa942fc3d9d46716caee29b8">https://github.com/soulxu/nova-v3-api-doc/commit/295a28fdf435f23bfa942fc3d9d46716caee29b8</a>)</p>

<p>We needn&rsquo;t doing anything for python code, except bump the version in the
decorator:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@wsgi.version</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="s">&#39;3.0&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">202</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;3.0&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
</span><span class='line'>        <span class="o">....</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>Next just need copy the v2.1 json-schema as v3.0, and doing a little change.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">some_action_input_3_0</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;some_action&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;param_a&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;string&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;param_a&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;some_action&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;ext:mapping&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;param_a&#39;</span><span class="p">:</span> <span class="s">&#39;param_a&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">some_action_output_3_0</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s">&#39;action_result&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;object&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s">&#39;properties&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="s">&#39;result_a&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;type&#39;</span><span class="p">:</span> <span class="s">&#39;string&#39;</span><span class="p">}</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;result_a&#39;</span><span class="p">],</span>
</span><span class='line'>            <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s">&#39;required&#39;</span><span class="p">:</span> <span class="p">[</span><span class="s">&#39;action_result&#39;</span><span class="p">],</span>
</span><span class='line'>    <span class="s">&#39;additionalProperties&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
</span><span class='line'>    <span class="s">&#39;ext:mapping&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;result_a&#39;</span><span class="p">:</span> <span class="s">&#39;result_a&#39;</span><span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>The code looks more. But actually the most of work is just copy the 2.1 json-schema
as 3.0, and change the inconsistent in the 3.0 json-schema. I chose just put the each
version json-schema in the file, and naming with version. That make the json-schema
easy to maintenance and more readable for dev. And the wsgi infrastruct implementation
is more simple.</p>

<p>There are more things need to be explaned.</p>

<ul>
<li>The mapping info:</li>
</ul>


<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="s">&#39;ext:mapping&#39;</span><span class="p">:</span> <span class="p">{</span><span class="s">&#39;result_a&#39;</span><span class="p">:</span> <span class="s">&#39;result_a&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>The wsgi code will use this mapping info to map the input/output into/from flat dict
(or nova objects).</p>

<p>Actually this is also kind of translation. But without format knowledge in the
python code, this reduce the complex in our wsgi infrastruct. We just need implement
tranlsation to mapping the input into flat dict (nova objects). We needn&rsquo;t support
different kind of instruct, and needn&rsquo;t to translate the json-schema.</p>

<ul>
<li>The decorator wsgi.response</li>
</ul>


<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@wsgi.version</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="s">&#39;3.0&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>This decorator means the request version between 2.1 and 3.0 will be routed into
this function. If there isn&rsquo;t support any version between 2.1 and 3.0, there also
no json-schema for that version, the wsgi code will return error for the user.</p>

<h2>Make Semantic Change</h2>

<p>Another use-case is the semantic change.</p>

<p>(PoC with evacuate API as example:
 <a href="https://github.com/soulxu/nova-v3-api-doc/commit/704118c9e69891dd32729903b348bf85ab136a72">https://github.com/soulxu/nova-v3-api-doc/commit/704118c9e69891dd32729903b348bf85ab136a72</a>)</p>

<p>If there is semantic change happened, the code will be looks like as below:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'>    <span class="nd">@wsgi.version</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="s">&#39;3.3&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">204</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">202</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;3.0&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
</span><span class='line'>        <span class="o">....</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@wsgi.version</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="s">&#39;4.0&#39;</span><span class="p">,</span> <span class="nb">max</span><span class="o">=</span><span class="s">&#39;4.5&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">202</span><span class="p">,</span> <span class="n">version</span><span class="o">=</span><span class="s">&#39;4.0&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
</span><span class='line'>        <span class="o">....</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>Those code means verison v2.1~v3.3 will execute frist some_action function,
v4.0~v4.5 will execute second some_action function.</p>

<p>We only write new function for same api when we have semantic change. This is
more readable than we execute different version internal function in same api function.
(compare to <a href="https://review.openstack.org/82301">https://review.openstack.org/82301</a>)</p>

<p>And also easy to maintenance than we add function for each API version (Add function
for each API version come from micro-version discussion previously).</p>

<p>If there are duplicate code between two version some_action function, we just need
move the duplicate code into common function as we share code in normally.</p>

<p>The complete demo for user-case with real API is in the POC last 4 commits.</p>

<ul>
<li>Fix inconsistent for evacuate: <a href="https://github.com/soulxu/nova-v3-api-doc/commit/295a28fdf435f23bfa942fc3d9d46716caee29b8">https://github.com/soulxu/nova-v3-api-doc/commit/295a28fdf435f23bfa942fc3d9d46716caee29b8</a></li>
<li>Add new fake parameter for evacuate: <a href="https://github.com/soulxu/nova-v3-api-doc/commit/04896d1109b6ce9d213eaf1f270a8c8c34ca04c6">https://github.com/soulxu/nova-v3-api-doc/commit/04896d1109b6ce9d213eaf1f270a8c8c34ca04c6</a></li>
<li>Fix status code for evacuate: <a href="https://github.com/soulxu/nova-v3-api-doc/commit/3ca3ebc9a3c17f5694918958f8bc8c5009f821d1">https://github.com/soulxu/nova-v3-api-doc/commit/3ca3ebc9a3c17f5694918958f8bc8c5009f821d1</a></li>
<li>Fake semantic change for evcaute: <a href="https://github.com/soulxu/nova-v3-api-doc/commit/704118c9e69891dd32729903b348bf85ab136a72">https://github.com/soulxu/nova-v3-api-doc/commit/704118c9e69891dd32729903b348bf85ab136a72</a></li>
</ul>


<p>With those method, hope we got more easy maintenance, more readable, simply to implement
for micro-version.</p>

<h1>Policy enforcement</h1>

<p>We already have some plan for improve the nova api policy enforcement.
Some of them block by the v2 on v3 discussion, but those will continue in K (but still low priority)</p>

<ul>
<li>Enforce policy at Nova REST API layer: <a href="https://review.openstack.org/92005">https://review.openstack.org/92005</a></li>
<li>Provide separated policy rule for each API: <a href="https://review.openstack.org/92326">https://review.openstack.org/92326</a></li>
<li>Support policy configuration directoy: <a href="https://review.openstack.org/105362">https://review.openstack.org/105362</a> (Already merged in oslo-incubator)</li>
</ul>


<p>After we provide separated policy rule for all the API. There is one more thing
we can do. It is about doing the policy enforcemance by wsgi infrastructure.
Currently the each policy enforcement need write one line code in the api layer:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">authorize</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="n">instance</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">&quot;some_action&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>We can eliminate this duplicated code.</p>

<p>So hope the wsgi infrasturcture can doing that. For policy enforcement, policy rule
need check with &lsquo;target&rsquo;. So there need way let wsgi infrastruct to know how to
generate the target for policy checks.</p>

<p>So the API code will looks like as below:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">SomeActionController</span><span class="p">(</span><span class="n">wsgi</span><span class="o">.</span><span class="n">Controller</span><span class="p">):</span>
</span><span class='line'>    <span class="n">resource_obj_cls</span> <span class="o">=</span> <span class="n">objects</span><span class="o">.</span><span class="n">Instance</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span> <span class="o">=</span> <span class="n">compute</span><span class="o">.</span><span class="n">API</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@wsgi.version</span><span class="p">(</span><span class="n">base</span><span class="o">=</span><span class="s">&#39;2.1&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@extensions.expected_error</span><span class="p">(())</span>
</span><span class='line'>    <span class="nd">@wsgi.response</span><span class="p">(</span><span class="mi">204</span><span class="p">)</span>
</span><span class='line'>    <span class="nd">@validation.schema</span><span class="p">(</span><span class="n">some_action</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">some_action</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">req</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
</span><span class='line'>        <span class="n">context</span> <span class="o">=</span> <span class="n">req</span><span class="o">.</span><span class="n">environ</span><span class="p">[</span><span class="s">&quot;nova.context&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">param_a</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">&quot;param_a&quot;</span><span class="p">]</span>
</span><span class='line'>        <span class="n">res</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">compute_api</span><span class="o">.</span><span class="n">some_action</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">instance</span><span class="p">,</span> <span class="n">param_a</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">{</span><span class="s">&quot;result_a&quot;</span><span class="p">:</span> <span class="n">res</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>The api code will accept nova object instead of resource id. Wsgi code will know
to instance the target by resource_obj_cls. Then the policy enforcement can be
done by wsgi code.</p>

<p>I didn&rsquo;t write some PoC code for this yet. I will write some code to prove this
idea works later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用KVM API实现Emulator demo]]></title>
    <link href="http://soulxu.github.io/blog/2014/08/11/use-kvm-api-write-emulator/"/>
    <updated>2014-08-11T11:06:38+08:00</updated>
    <id>http://soulxu.github.io/blog/2014/08/11/use-kvm-api-write-emulator</id>
    <content type="html"><![CDATA[<p>这边文章来描述如何用KVM API来写一个Virtualizer的demo code, 也就是相当与Qemu，用来做设备模拟。
此文是帮助想了解KVM原理已经Qemu原理的人 or Just for fun.</p>

<p>完整的Code在这里： <a href="https://github.com/soulxu/kvmsample">https://github.com/soulxu/kvmsample</a></p>

<p>这个code其实是很久以前写的，以前在team内部分享过，用来帮助大家理解kvm工作原理。现在既然要开始写code了，就用这个先来个开端。</p>

<p>当然我不可能写一个完整的Qemu，只是写出Qemu中最基本的那些code。这个虚拟机只有一个VCPU和512000000字节内存(其实富裕了)
可以进行一些I/O，当然这些I/O的结果只能导致一些print，没有实际模拟任何设备。所以所能执行的Guest也很简单。</p>

<p>首先来看看Guest有多简单。</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='gas'><span class='line'><span class="na">.globl</span> <span class="no">_start</span>
</span><span class='line'>    <span class="na">.code16</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>    <span class="nf">xorw</span> <span class="nv">%ax</span><span class="p">,</span> <span class="nv">%ax</span>
</span><span class='line'>
</span><span class='line'><span class="nl">loop1:</span>
</span><span class='line'>    <span class="nf">out</span> <span class="nv">%ax</span><span class="p">,</span> <span class="no">$0x10</span>
</span><span class='line'>    <span class="nf">inc</span> <span class="nv">%ax</span>
</span><span class='line'>    <span class="nf">jmp</span> <span class="no">loop1</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>不熟悉汇编也没关系，这code很简单，基本也能猜到干啥了。对，Guest只是基于at&amp;t汇编写的一个在8086模式下的死循环，不停的向端口0x10写东西。目标就是让这个Guest跑起来了。</p>

<p>我们的目标就是让这个Guest能执行起来。下面开始看我们虚拟机的code了。</p>

<p>我们先来看看main函数：</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">kvm</span> <span class="o">*</span><span class="n">kvm</span> <span class="o">=</span> <span class="n">kvm_init</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">kvm</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;kvm init fauilt</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">kvm_create_vm</span><span class="p">(</span><span class="n">kvm</span><span class="p">,</span> <span class="n">RAM_SIZE</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;create vm fault</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">load_binary</span><span class="p">(</span><span class="n">kvm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// only support one vcpu now</span>
</span><span class='line'>    <span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vcpu_number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vcpus</span> <span class="o">=</span> <span class="n">kvm_init_vcpu</span><span class="p">(</span><span class="n">kvm</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">kvm_cpu_thread</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">kvm_run_vm</span><span class="p">(</span><span class="n">kvm</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">kvm_clean_vm</span><span class="p">(</span><span class="n">kvm</span><span class="p">);</span>
</span><span class='line'>    <span class="n">kvm_clean_vcpu</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vcpus</span><span class="p">);</span>
</span><span class='line'>    <span class="n">kvm_clean</span><span class="p">(</span><span class="n">kvm</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>这里正是第一个kvm基本原理： 一个虚拟机就是一个进程，我们的虚拟机从这个main函数开始</p>

<p>让我先来看看kvm_init。这里很简单，就是打开了/dev/kvm设备，这是kvm的入口，对kvm的所有操作都是通过对文件描述符上执行ioctl来完成。
这里很简单，就是打开kvm设备，然后将文件描述符返回到我自己创建的一个结构体当中。</p>

<p>然后我们就开始创建一个vm，然后为其分配内存。</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vm_fd</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">dev_fd</span><span class="p">,</span> <span class="n">KVM_CREATE_VM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>创建一个虚拟机很简单，在kvm设备上执行这么一个ioctl即可，然后会得到新建的vm的文件描述，用来操作这个vm。</p>

<p>然后我们来分配内存，这里最重要的是struct kvm_userspace_memory_region这个数据结构。</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* for KVM_SET_USER_MEMORY_REGION */</span>
</span><span class='line'><span class="k">struct</span> <span class="n">kvm_userspace_memory_region</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">__u32</span> <span class="n">slot</span><span class="p">;</span>
</span><span class='line'>        <span class="n">__u32</span> <span class="n">flags</span><span class="p">;</span>
</span><span class='line'>        <span class="n">__u64</span> <span class="n">guest_phys_addr</span><span class="p">;</span>
</span><span class='line'>        <span class="n">__u64</span> <span class="n">memory_size</span><span class="p">;</span> <span class="cm">/* bytes */</span>
</span><span class='line'>        <span class="n">__u64</span> <span class="n">userspace_addr</span><span class="p">;</span> <span class="cm">/* start of the userspace allocated memory */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>memory_size是guest的内存的大小。userspace_addr是你为其份分配的内存的起始地址，而guest_phys_addr则是这段内存映射到guest的什么物理内存地址。</p>

<p>这里用mmap创建了一段匿名映射，并将地址置入userspace_addr。随后来告诉我们的vm这些信息：</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ioctl</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vm_fd</span><span class="p">,</span> <span class="n">KVM_SET_USER_MEMORY_REGION</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">mem</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>这里是来操作我们的vm了，不是kvm设备文件了。</p>

<p>我们有了内存了，现在可以把我们的guest code加载的进来了，这个实现很简单就是打开编译后的二进制文件将其写入我们分配的内存空间当中。
这里所要注意的就是如何编译guest code，这里我们编译出来的是flat binary，不需要什么elf的封装。</p>

<p>有了内存，下一步就是vcpu了，创建vcpu是在kvm_init_vcpu函数里。
这里最重要的操作只有这个：</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm_run_mmap_size</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">dev_fd</span><span class="p">,</span> <span class="n">KVM_GET_VCPU_MMAP_SIZE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">...</span>
</span><span class='line'><span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm_run</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">kvm_run_mmap_size</span><span class="p">,</span> <span class="n">PROT_READ</span> <span class="o">|</span> <span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">vcpu</span><span class="o">-&gt;</span><span class="n">vcpu_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>struct kvm_run是保存vcpu状态的一个数据结构，稍后我们可以看到我们可以从这里得到当陷入后具体陷入原因。</p>

<p>有了内存和vcpu就可以运行了：</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vcpus</span><span class="o">-&gt;</span><span class="n">vcpu_thread</span><span class="p">),</span> <span class="p">(</span><span class="k">const</span> <span class="kt">pthread_attr_t</span> <span class="o">*</span><span class="p">)</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vcpus</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">vcpu_thread_func</span><span class="p">,</span> <span class="n">kvm</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>这里是另一个kvm基本概念了，一个vcpu就是一个线程。这里让我们为vcpu创建一个线程。</p>

<p>最终我们到了最关键的部分了，就是这个vcpu线程。其实他就是一个循环。
当循环开始的时候，我们让他执行guest code:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ret</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">kvm</span><span class="o">-&gt;</span><span class="n">vcpus</span><span class="o">-&gt;</span><span class="n">vcpu_fd</span><span class="p">,</span> <span class="n">KVM_RUN</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>当执行这条语句后，guest code就开始执行了，这个函数就阻塞在这里了。直到something happened而且需要由hypervisor进行处理的时候这个函数才会返回。
比如说I/O发生了，这个函数就会返回了，这里我们就需要通过struct kvm_run中得到具体的陷入原因。我们的guest只是做一些I/O port的操作，所以可以看到
当退出原因是KVM_EXIT_IO时，我将guest的所写入的数据print出来。</p>

<p>到这里这就是这个virtualizer的全部了. 如果你想体验一下，只需要执行make。</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>:~/code/kvmsample<span class="nv">$ </span>make
</span><span class='line'>cc    -c -o main.o main.c
</span><span class='line'>gcc main.c -o kvmsample -lpthread
</span><span class='line'>as -32 test.S -o test.o
</span><span class='line'>ld -m elf_i386 --oformat binary -N -e _start -Ttext 0x10000 -o test.bin test.o
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>然后执行kvmsample</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>./kvmsample
</span><span class='line'><span class="nb">read </span>size: 712288
</span><span class='line'>KVM start run
</span><span class='line'>KVM_EXIT_IO
</span><span class='line'>out port: 16, data: 0
</span><span class='line'>KVM start run
</span><span class='line'>KVM_EXIT_IO
</span><span class='line'>out port: 16, data: 1
</span><span class='line'>KVM start run
</span><span class='line'>KVM_EXIT_IO
</span><span class='line'>out port: 16, data: 2
</span><span class='line'>KVM start run
</span><span class='line'>KVM_EXIT_IO
</span><span class='line'>out port: 16, data: 3
</span><span class='line'>....
</span></code></pre></td></tr></table></div></figure></notextile></div>


<p>其实qemu里面的code也就是这样，你也可以在其中找到这个loop，只不过它被qemu内部的各种设备框架所隐藏起来了。</p>
]]></content>
  </entry>
  
</feed>
